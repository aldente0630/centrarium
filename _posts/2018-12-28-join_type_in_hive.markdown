---
layout: post
title: 하이브에서의 조인 유형
date: 2018-12-28 00:00:00
author: Weidong Zhou
categories: Data-Engineering
---  
  
  
**Weidong Zhou의 [*Join Type in Hive: Common Join 외 3편*](https://weidongzhou.wordpress.com/2017/06/06/join-type-in-hive-common-join)을 번역했습니다.**
  
  
- - -

# 1. 일반 조인
  
하이브 쿼리 성능 튜닝에서 신경써야할 부분 중 하나는 쿼리 실행 시 이뤄지는 조인 유형이다. 오라클의 조인 유형과 마찬가지로 여러 다른 유형에 따라 실행 시간이 크게 달라질 수 있다. 몇 번의 연재에 걸쳐 하이브의 조인 유형에 대해 논의할 것이다. 조인 유형의 첫 번째는 **일반 조인**이다.
  
**일반 조인**은 하이브의 기본적인 조인 유형으로 **셔플 조인**, **분산 조인** 또는 **정렬 병합 조인**이라고도한다. 조인 작업 동안 두 테이블의 모든 행을 조인 키 기반으로 전체 노드에 분산시킨다. 이 과정을 통해 조인 키가 동일한 값들은 동일한 노드에서 작업이 종료된다. 해당 조인 작업은 맵 / 리듀스의 온전한 주기를 갖는다.
  
![그림1](https://aldente0630.github.io/assets/join_type_in_hive1.jpg)
  
**작동 원리**
1. 맵 단계에서 맵퍼는 테이블을 읽고 조인 컬럼 값을 키로 정해 출력한다. 키 - 값 쌍을 중간 파일에 기록한다.
2. 셔플 단계에서 이러한 쌍을 정렬하고 병합한다. 동일한 키의 모든 행을 동일한 리듀스 인스턴스로 전송한다.
3. 리듀스 단계에서 리듀서는 정렬한 데이터를 가져와 조인을 수행한다.

**일반 조인**의 장점은 테이블 크기와 상관없이 작동한다는 점이다. 그러나 셔플은 비용이 매우 큰 작업이기에 자원을 많이 잡아먹는다. 데이터에서 소수의 조인 키가 차지하는 비율이 매우 클 경우 해당 리듀서에 과부하가 걸리게된다. 대다수의 리듀서에서 조인 작업이 완료됐지만 일부 리듀서가 계속 실행되는 식으로 문제의 증상이 나타난다. 쿼리의 총 실행 시간은 실행 시간이 가장 긴 리듀서가 결정한다. 분명히 이건 전형적으로 **데이터가 편중된** 문제이다. 이어지는 내용에서 이러한 데이터 편중 문제을 다루는 특수 조인에 관해 논할 것이다.

**조인 유형을 식별하는 방법**  
**EXPLAIN** 명령을 사용하면 **리듀스 오퍼레이터 트리** 바로 아래에 **조인 오퍼레이터**가 표시된다.
  
# 2. 맵 조인
  
지금까지 하이브의 기본 조인 유형인 일반 조인에 관하여 이야기를 나눴다. 이제 **맵 조인**에 대해 논의할 것이다. **자동 맵 조인**, **맵 사이드 조인** 또는 **브로드캐스트 조인**이라고도 불린다.

**일반 조인** 또는 **정렬 병합 조인**의 가장 큰 문제점 중 하나는 데이터 셔플링에 너무 많은 공을 들인다는 점이다. 하이브 쿼리 속도를 높이기 위해 **맵 조인**을 사용해볼 수 있다. 조인할 테이블 중 하나가 크기가 작아 메모리에 올릴 수 있으면 맵 조인을 사용해볼 수 있다.
  
![그림2](https://aldente0630.github.io/assets/join_type_in_hive2.jpg)
  
**맵 조인**의 첫번째 단계로 본격적인 맵 리듀스 작업을 하기 전에 맵 리듀스 로컬 작업을 수행한다. 이 맵 / 리듀스 작업은 작은 크기의 테이블 데이터를 HDFS에서 읽어와 메모리 내 해시 테이블에 저장하고 다시 해시 테이블 파일로 내린다. 본격적인 맵 리듀스 조인 작업이 시작되면 해시 테이블 파일은 [Hadoop 분산 캐시](https://hadoop.apache.org/docs/r1.2.1/api/org/apache/hadoop/filecache/DistributedCache.html)로 옮겨진다. Hadoop 분산 캐시는 각 매퍼의 로컬 디스크마다 파일을 저장한다. 모든 매퍼는 이 해시 테이블 파일을 메모리에 올린 다음 맵 단계에서 조인을 수행한다. 예를 들어 크기가 큰 테이블 A와 작은 테이블 B를 조인할 때 테이블 A를 위한 모든 매퍼는 테이블 B 전체를 읽어둔다. 맵 리듀스 작업의 맵 단계에서 더 작은 테이블을 메모리에 올린 후 조인을 수행하면 리듀서가 필요하지 않으므로 리듀서 단계를 건너뛴다. 맵 조인은 기본적인 일반 조인보다 빠르게 수행된다.

**매개 변수**

* **맵 조인**의 가장 중요한 매개 변수는 **hive.auto.convert.join**이다. **true**로 설정해야한다.
* 조인할 때 작은 테이블인지 판단하는 기준은 매개 변수 **hive.mapjoin.smalltable.filesize**에 의해 조절 가능하다. 기본적으로 25MB이다.
* 3개 이상의 테이블을 조인하면 하이브는 모든 테이블의 크기를 더 작은 것으로 가정하고 3개 이상의 맵 사이드 조인을 생성한다. n-1개 테이블 크기가 기본값인 10MB보다 작은 경우 조인 속도를 더 높이기 위해 세 개 이상의 맵 사이드 조인을 단일 맵 사이드 조인으로 결합할 수 있다. 이를 위해서는 **hive.auto.convert.join.noconditionaltask** 매개 변수를 **true**로 설정하고 매개 변수 **hive.auto.convert.join.noconditionaltask.size**를 지정해야한다.

**제약**

전체 외부 조인에 **맵 조인**을 절대 사용할 수 없다. 오른쪽 테이블 크기가 25MB보다 작으면 왼쪽 외부 조인에 맵 조인을 사용할 수 있다. 오른쪽 외부 조인에 사용할 수 없다.

**조인 유형을 식별하는 방법**
  
**EXPLAIN** 명령을 사용하면 **맵 오퍼레이터 트리** 바로 아래에 **맵 조인 오퍼레이터**가 표시된다.

**기타**  
  
맵 조인을 사용하는 쿼리로 지정하기 위해 힌트를 이용할 수 있다. 아래 예제에서 더 작은 테이블을 힌트에 썼고 그 결과 테이블 B를 직접 캐시하도록 했다.
  
```sql
Select /*+ MAPJOIN(b) */ a.key, a.value from a join b on a.key = b.key
```
  
**예제**  
  
```sql
hive> set hive.auto.convert.join=true;
hive> set hive.auto.convert.join.noconditionaltask=true;
hive> set hive.auto.convert.join.noconditionaltask.size=20971520
hive> set hive.auto.convert.join.use.nonstaged=true;
hive> set hive.mapjoin.smalltable.filesize = 30000000; 
```
  
# 3. 편중된 조인
  
지금까지 일반 조인과 맵 조인에 대해 설명했다. 이번 절에서는 **편중된 조인**에 대해 논의할 것이다. 일반 조인에서 했던 이야기를 기억해보자. **일반 조인**의 중요한 문제점 중 하나는 데이터가 **편중되어 있을 때** 조인을 제대로 수행하지 못한다는 점이다. 리듀서 대부분에서 조인 작업을 완료했어도 편중된 키에서 돌아가는, 실행 시간이 가장 긴 리듀서를 쿼리는 기다리게된다.
  
**편중된 조인**은 해당 문제 해결을 목표로 한다. 수행 시간 동안 데이터를 훑어보고 **hive.skewjoin.key** 매개 변수로 제어하는, 데이터가 굉장히 편중된 키를 감지해낸다. 해당 키를 처리하는 대신 HDFS 디렉토리에 임시로 저장한다. 그런 다음, 후속 맵 리듀스 작업을 통해 편중된 해당 키를 처리한다. 해당 키가 모든 테이블 데이터에 대해 편중되어있지 않을 것이고 맵 조인 처리가 가능할 것이기에 후속 맵 리듀스 작업(편중된 키의 경우)은 보통 훨씬 빠르다.
  
![그림3](https://aldente0630.github.io/assets/join_type_in_hive3.jpg)
  
예를 들어 표 A와 B와 조인이 있다고합시다. 표 A와 B 모두 조인 C 럼에서 "mytest"데이터를 왜곡했습니다. 표 B에 표 A에서 왜곡 된 데이터가있는 행 수가 적다면 첫 번째 단계는 B를 스캔하고 "mytest"키가있는 모든 행을 메모리 내 해시 테이블에 저장하는 것입니다. 그런 다음 매퍼 세트를 실행하여 표 A를 읽고 다음을 수행하십시오.
  
* 키 "mytest"가 비뚤어진 경우 조인에 B의 해시 된 버전이 사용됩니다.
* 다른 모든 키의 경우 조인을 수행하는 감속기에 행을 보냅니다. 동일한 축소 기가 표 B를 검색하는 매퍼에서 행을 가져옵니다.
  
**비뚤어진 결합** 중에 표 B가 두 번 스캔됨을 알 수 있습니다. 표 A의 비뚤어진 키는 매퍼가 읽고 처리하며지도 측 결합을 수행합니다. 표 A의 키가 기울어 진 행이 감속기로 전송 된 적이 없습니다. 표 A의 나머지 키들에 대해서는 일반 공통 조인 방식을 사용합니다.
  
**비뚤어진 조인**을 사용하려면 데이터와 쿼리를 이해해야합니다. 매개 변수 **hive.optimize.skewjoin**을 **true**로 설정하십시오. 매개 변수 **hive.skewjoin.key**는 선택 사항이며 기본적으로 100000입니다.
  
**조인을 식별하는 방법**
**EXPLAIN** 명령을 사용할 때 **Join Operator** 및 **Reduce Operator Tree** 아래에서 **handleSkewJoin : true**가 표시됩니다.
  
**예제**  
  
```sql
set hive.optimize.skewjoin = true;
set hive.skewjoin.key=500000;
set hive.skewjoin.mapjoin.map.tasks=10000;
set hive.skewjoin.mapjoin.min.split=33554432;
```
  
(번역 중)
  

